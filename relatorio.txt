
	Guilherme Dantas (individual)
	
	Considerações:
		- a contagem de filas começa do zero :)
		- o quantum é de 2 segundos
	
=========================================================================================
	
	[1] O processo deve ficar na primeira fila (queue #0)
	
	Se o quantum é de 2, então se a rajada for menor (1), sempre entrará em IO
	e, com isso, permanecerá na primeira fila.
	
	exec prog (1,1,1,1,1,1)
	x
	Child process 2709 executing... prog 1 1 1 1 1 1 
	Child process 2709 ready to be executed.
	Child process 2709 inserted in queue #0
	There are 1 processes waiting to be executed.
	Starting scheduler...
	The scheduler is dealing with queue #0.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to block him (IO)...
	Interrupted process 2709.
	Process 2709 is blocked by IO.
	Processo 2709 is no longer blocked by IO.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to block him (IO)...
	Interrupted process 2709.
	Process 2709 is blocked by IO.
	Processo 2709 is no longer blocked by IO.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to block him (IO)...
	Interrupted process 2709.
	Process 2709 is blocked by IO.
	Processo 2709 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to block him (IO)...
	Interrupted process 2709.
	Process 2709 is blocked by IO.
	Processo 2709 is no longer blocked by IO.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to block him (IO)...
	Interrupted process 2709.
	Process 2709 is blocked by IO.
	Processo 2709 is no longer blocked by IO.
	Scheduling process 2709...
	2709
	Child process 2709 requests parent to terminate him (EOF)...
	Interrupted process 2709.
	Process 2709 finished.
	Fila #0: empty
	Fila #1: empty
	Fila #2: empty
	No remaining processes
	End of scheduling. All processes have been executed.
	
	>>> Na prática, o processo permaneceu na primeira fila até o final (queue #0)
	
=========================================================================================
	
	[2] O processo deve ficar na segunda fila (queue #1)
	
	O comando proposto é de (3,2,2,2) e deve levar o programa a permanecer na
	segunda fila. Traduzindo para o escalonador com quantum = 2 u.t., isto seria
	equivalente a escolher uma rajada que o levasse à segunda fila, e, em seguida,
	o quantum da segunda fila. Ou seja... (5,4,4,4)	
	
	exec prog (5,4,4,4)
	x]
	Child process 3221 executing... prog 5 4 4 4 
	Child process 3221 ready to be executed.
	Child process 3221 inserted in queue #0
	There are 1 processes waiting to be executed.
	Starting scheduler...
	The scheduler is dealing with queue #0.
	Scheduling process 3221...
	3221
	3221
	Interrupted process 3221.
	Process 3221 exceeded queue quantum of 2 time units .
	Process 3221 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3221...
	3221
	3221
	3221
	Child process 3221 requests parent to block him (IO)...
	Interrupted process 3221.
	Process 3221 is blocked by IO.
	Processo 3221 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 3221...
	3221
	3221
	Interrupted process 3221.
	Process 3221 exceeded queue quantum of 2 time units .
	Process 3221 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3221...
	3221
	3221
	Child process 3221 requests parent to block him (IO)...
	Interrupted process 3221.
	Process 3221 is blocked by IO.
	Processo 3221 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 3221...
	3221
	3221
	Interrupted process 3221.
	Process 3221 exceeded queue quantum of 2 time units .
	Process 3221 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3221...
	3221
	3221
	Child process 3221 requests parent to block him (IO)...
	Interrupted process 3221.
	Process 3221 is blocked by IO.
	Processo 3221 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 3221...
	3221
	3221
	Interrupted process 3221.
	Process 3221 exceeded queue quantum of 2 time units .
	Process 3221 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3221...
	3221
	3221
	Child process 3221 requests parent to terminate him (EOF)...
	Interrupted process 3221.
	Process 3221 finished.
	Fila #0: empty
	Fila #1: empty
	Fila #2: empty
	No remaining processes
	End of scheduling. All processes have been executed.

	>>> Na prática, o processo oscilou entre a fila #0 e #1. Isto porque, 
	na primeira fila, o processo excedeu o quantum de 2 u.t. - foi para a 
	segunda fila, e lá entrou em IO. Ao entrar em IO, a sua prioridade foi
	aumentada e volta para a primeira fila. Este processo se repetiu até
	o fim. Este comportamento foi esperado, pois o delay causado pela troca
	de sinais faz com que a rajada do processo filho e o quantum do escalonador
	não "casem". Contudo, se persistir com o quantum de uma determinada fila,
	o processo tenderá sempre a retornar a esta fila, naturalmente.
	
=========================================================================================
	
	[3] O processo deve ficar na última fila (queue #2)
	
	O comando sugerido é de (7,4). Com quantum 1, operaria da seguinte forma:
		- excede quantum de 1 (sobra 6) - vai pra fila #1
		- excede quantum de 2 (sobra 4) - vai pra fila #2
		- rajada == quantum implica em exceder?
		--- SIM
			- excede quantum de 4 - continua na fila #2
			- excede quantum de 4 - continua na fila #2
		--- NÃO
			- entra em IO - vai para fila #1
			- excede quantum de 2 - vai para fila #2 
	 
	Em todos os casos, o processo termina na fila #2. Para replicar este caso
	com quantum = 2... Basta ver...
	
	7 = 1ut + 2ut + 4ut
	4 = 4ut
	
	Com ut = 2, A primeira rajada é de 14, e a segunda, de 8. Portanto...
	
	exec prog (14,8)
	x
	Child process 3311 executing... prog 14 8 
	Child process 3311 ready to be executed.
	Child process 3311 inserted in queue #0
	There are 1 processes waiting to be executed.
	Starting scheduler...
	The scheduler is dealing with queue #0.
	Scheduling process 3311...
	3311
	3311
	Interrupted process 3311.
	Process 3311 exceeded queue quantum of 2 time units .
	Process 3311 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3311...
	3311
	3311
	3311
	3311
	Interrupted process 3311.
	Process 3311 exceeded queue quantum of 4 time units .
	Process 3311 will migrate from queue #1 to queue #2
	The scheduler is dealing with queue #2.
	Scheduling process 3311...
	3311
	3311
	3311
	3311
	3311
	3311
	3311
	3311
	Interrupted process 3311.
	Process 3311 exceeded queue quantum of 8 time units .
	Process 3311 will remain in queue #2.
	The scheduler is dealing with queue #2.
	Scheduling process 3311...
	Child process 3311 requests parent to block him (IO)...
	Interrupted process 3311.
	Process 3311 is blocked by IO.
	Processo 3311 is no longer blocked by IO.
	The scheduler is dealing with queue #1.
	Scheduling process 3311...
	3311
	3311
	3311
	3311
	Interrupted process 3311.
	Process 3311 exceeded queue quantum of 4 time units .
	Process 3311 will migrate from queue #1 to queue #2
	The scheduler is dealing with queue #2.
	Scheduling process 3311...
	3311
	3311
	3311
	3311
	Child process 3311 requests parent to terminate him (EOF)...
	Interrupted process 3311.
	Process 3311 finished.
	Fila #0: empty
	Fila #1: empty
	Fila #2: empty
	No remaining processes
	End of scheduling. All processes have been executed.
	
	>>> Na prática, ao avaliar rajada == quantum, na última fila,
	o processo conseguiu imprimir todas as rajadas (8), e foi interrompido.
	Permaneceu na fila #2, e ao ser escalonado novamente, entrou em IO.
	Voltou para fila #1, e lá, ao executar uma rajada de tamanho 8 numa
	fila com quantum 4, voltou para a fila #2, aonde executou as 4 últimas
	rajadas e terminou. Portanto, o resultado esperado coincidiu com o obtido.
	
=========================================================================================
	
	[4] Deseja-se que o processo oscile as filas, indo da primeira à última.
	
	O comando sugerido é de (1,2,4,3). Contudo, sabe-se que o escalonador tem
	um comportamento caótico com casos rajada == quantum. De forma a obedecer
	ao objetivo desde commando, modificarei o comando para (3,5,9,6), de forma
	a respeitar a ordem das rajadas (por tamanho), mas forçando o escalonador
	a encarar as rajadas como CPU-bound.
	
	exec prog (3,5,9,6)
	x
	Child process 3490 executing... prog 3 5 9 6 
	Child process 3490 ready to be executed.
	Child process 3490 inserted in queue #0
	There are 1 processes waiting to be executed.
	Starting scheduler...
	The scheduler is dealing with queue #0.
	Scheduling process 3490...
	3490
	3490
	Interrupted process 3490.
	Process 3490 exceeded queue quantum of 2 time units .
	Process 3490 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3490...
	3490
	Child process 3490 requests parent to block him (IO)...
	Interrupted process 3490.
	Process 3490 is blocked by IO.
	Processo 3490 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 3490...
	3490
	3490
	Interrupted process 3490.
	Process 3490 exceeded queue quantum of 2 time units .
	Process 3490 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3490...
	3490
	3490
	3490
	Child process 3490 requests parent to block him (IO)...
	Interrupted process 3490.
	Process 3490 is blocked by IO.
	Processo 3490 is no longer blocked by IO.
	The scheduler is dealing with queue #0.
	Scheduling process 3490...
	3490
	3490
	Interrupted process 3490.
	Process 3490 exceeded queue quantum of 2 time units .
	Process 3490 will migrate from queue #0 to queue #1
	The scheduler is dealing with queue #1.
	Scheduling process 3490...
	3490
	3490
	3490
	3490
	Interrupted process 3490.
	Process 3490 exceeded queue quantum of 4 time units .
	Process 3490 will migrate from queue #1 to queue #2
	The scheduler is dealing with queue #2.
	Scheduling process 3490...
	3490
	3490
	3490
	Child process 3490 requests parent to block him (IO)...
	Interrupted process 3490.
	Process 3490 is blocked by IO.
	Processo 3490 is no longer blocked by IO.
	The scheduler is dealing with queue #1.
	Scheduling process 3490...
	3490
	3490
	3490
	3490
	Interrupted process 3490.
	Process 3490 exceeded queue quantum of 4 time units .
	Process 3490 will migrate from queue #1 to queue #2
	The scheduler is dealing with queue #2.
	Scheduling process 3490...
	3490
	3490
	Child process 3490 requests parent to terminate him (EOF)...
	Interrupted process 3490.
	Process 3490 finished.
	Fila #0: empty
	Fila #1: empty
	Fila #2: empty
	No remaining processes
	End of scheduling. All processes have been executed.

	>> Na prática, o processo chegou à última fila, como esperado, pelo
	"jeito" das rajadas. Obviamente, houveram interrupções por IO, mas
	as rajadas longas deram a entender que se tratava de um processo mais
	CPU-bound, o levando à última fila - com menor prioridade.
	
=========================================================================================
	

