┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                                                              ┃
┃              Trabalho 2 - Algoritmos de substituição de páginas              ┃
┃              ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺              ┃
┃                                                                              ┃
┃                                                            Guilherme Dantas  ┃
┃                                                                     1713155  ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃  Arquivos no diretório:                                                      ┃
┃                                                                              ┃
┃  autotable.py        script python para gerar tabela de resultados           ┃
┃  colours.h           interface de cores                                      ┃
┃  getresults.sh       script shell para gerar resultados crus                 ┃
┃  hourglass.c         fonte do módulo de ampulheta                            ┃
┃  hourglass.h         interface do módulo de ampulheta                        ┃
┃  Makefile            arquivo Make                                            ┃
┃  page.c              fonte do módulo de página                               ┃
┃  page.h              inferface do módulo de página                           ┃
┃  results.txt         texto gerado pelo script shell                          ┃
┃  sim-virtual.c       módulo principal (simulador)                            ┃
┃  t.hourglass.c       teste do módulo de ampulheta                            ┃
┃  t.page.c            teste do módulo de página                               ┃
┃  t.utils.c           teste do módulo de utilidades                           ┃
┃  T2-Guilherme.txt    este documento                                          ┃
┃  test.c              fonte do módulo de testes                               ┃
┃  test.h              interface do módulo de testes                           ┃
┃  utils.c             fonte do módulo de utilidades                           ┃
┃  utils.h             interface do módulo de utilidades                       ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                               Estrutura geral                                ┃
┃                               ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                                ┃
┃                                                                              ┃
┃  O simulador possui uma parte genérica e outra específica.                   ┃
┃  A parte específica depende do algoritmo escolhido pelo primeiro             ┃
┃  parâmetro passado ao programa. Ela tratará das estruturas de                ┃
┃  dados condizentes com o algoritmo de substituição de páginas                ┃
┃  selecionado, nas seguintes ocasiões:                                        ┃
┃                                                                              ┃
┃  - Inicialização - inicializar estruturas de dados                           ┃
┃  - Page Fault    - encontrar página a ser substituída                        ┃
┃  - Atualização   - atualizar informações de página acessada                  ┃
┃  - Destruição    - destruir estruturas de dados                              ┃
┃                                                                              ┃
┃  Um algoritmo não precisa necessariamente implementar alguma                 ┃
┃  funcionalidade para cada uma dessas ocasiões. Em questão de                 ┃
┃  implementação, estas "ocasiões" se traduzem na chamada de                   ┃
┃  uma função num vetor de ponteiros para funções. O algoritmo                 ┃
┃  selecionado se traduz num índice que acessa a função daquele                ┃
┃  algoritmo.                                                                  ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                                     NRU                                      ┃
┃                                     ⎺⎺⎺                                      ┃
┃                                                                              ┃
┃  - Inicialização: Alocado vetor para cada página possível,                   ┃
┃  que armazenará os candidatos a "vítima" de substuição quando                ┃
┃  ocorre um Page Fault.                                                       ┃
┃                                                                              ┃
┃  - Page Fault: Identifica os melhores candidatos a vítima (menor             ┃
┃  classe de prioridade possível), os põe no vetor de candidatos a             ┃
┃  vítimas. A vítima é escolhida aleatoriamente dentre os candidatos.          ┃
┃                                                                              ┃
┃  - Atualização: Zera a flag R a cada ciclo. Seta 1 a flag R da               ┃
┃  página acessada.                                                            ┃
┃                                                                              ┃
┃  - Destruição: Desaloca vetor de candidatos a vítima.                        ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                                     LRU                                      ┃
┃                                     ⎺⎺⎺                                      ┃
┃                                                                              ┃
┃  - Inicialização: Atribui a cada página da tabela de páginas no              ┃
┃  campo "informação", o valor 0. A semântica deste campo genérico             ┃
┃  neste algoritmo é de "idade". Este campo é encarado como um                 ┃
┃  unsigned long, portanto, não precisa ser reiniciado de tempos em            ┃
┃  tempos, pois o maior valor assumido é muito maior que a quantidade          ┃
┃  de linhas dos arquivos de simulação.                                        ┃
┃                                                                              ┃
┃  - Page Fault: É escolhida a página mais velha da memória principal.         ┃
┃                                                                              ┃
┃  - Atualização: Atribui ao campo de idade da página acessada o valor         ┃
┃  do contador que é incrementado a cada nova linha lida (tempo).              ┃
┃                                                                              ┃
┃  - Destruição: Nada.                                                         ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                                 NOVO (Ótimo)                                 ┃
┃                                 ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                                 ┃
┃                                                                              ┃
┃  - Inicialização: É alocado um vetor do tamanho do arquivo (#linhas),        ┃
┃  e armazenado na i-ésima posição o índice da página acessada no tempo        ┃
┃  i. Erros de formatação do arquivo podem ser levantados nessa etapa.         ┃
┃                                                                              ┃
┃  - Page Fault: Escolhe a página que está em memória que mais tardiamente     ┃
┃  será acessada. Caso houver páginas em memória que nunca mais serão          ┃
┃  acessadas, é escolhida a primeira nesta categoria.                          ┃
┃                                                                              ┃
┃  - Atualização: Nada.                                                        ┃
┃                                                                              ┃
┃  - Destruição: Desaloca vetor de histórico de acessos.                       ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                            Análise de Desempenho                             ┃
┃                            ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                             ┃
┃                                                                              ┃
┃  É possível ver nitidamente nas tabelas geradas pelo script, que há um       ┃
┃  algoritmo melhor que outro, em todos os casos de testes para os mesmos      ┃
┃  parâmetros (tamanho de página x arquivo).                                   ┃
┃                                                                              ┃
┃                 NOVO é melhor que LRU, que é melhor que NRU                  ┃
┃                                                                              ┃
┃  Isto é, para as mesmas configurações de tamanho de página e programas       ┃
┃  acessando a memória, o algoritmo NOVO é o melhor, depois LRU, e, por        ┃
┃  fim, NRU - o que é um bom sinal, pois realmente esperava-se que O NOVO      ┃
┃  tivesse a melhor perfomance dos três em quaisquer circunstâncias.           ┃
┃                                                                              ┃
┃  Já quanto ao número de falhas de página, não foi possível fazer uma         ┃
┃  relação global, pois varia demais, dependendo do arquivo. Ora aumenta       ┃
┃  o número de page faults ao aumentar o tamanho da página, ora diminui.       ┃
┃  Há vezes inclusive em que este número oscila (LRU em compilador.log).       ┃
┃  Contudo, pode-se tentar explicar o por quê desta variação de PFs            ┃
┃  para dado tipo de programa.                                                 ┃
┃                                                                              ┃
┃                            Página de tamanho 8 KB                            ┃
┃                            ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                            ┃
┃                                                                              ┃
┃                |---------------|---------------|---------------|             ┃
┃                |      NRU      |      LRU      |      NOVO     |             ┃
┃                |---------------|---------------|---------------|             ┃
┃                |   PF  |   PW  |   PF  |   PW  |   PF  |   PW  |             ┃
┃  --------------|-------|-------|-------|-------|-------|-------|             ┃
┃  |   compilador|   2532|    484|   2391|    263|   2380|    128|             ┃
┃  |   compressor|    255|      0|    255|      0|    255|      0|             ┃
┃  |       matriz|   2230|    182|   2214|     74|   2205|     63|             ┃
┃  |    simulador|   3785|   1737|   3405|    997|   3371|    722|             ┃
┃  ---------------------------------------------------------------             ┃
┃                                                                              ┃
┃                           Página de tamanho 16 KB                            ┃
┃                           ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                            ┃
┃                                                                              ┃
┃                |---------------|---------------|---------------|             ┃
┃                |      NRU      |      LRU      |      NOVO     |             ┃
┃                |---------------|---------------|---------------|             ┃
┃                |   PF  |   PW  |   PF  |   PW  |   PF  |   PW  |             ┃
┃  --------------|-------|-------|-------|-------|-------|-------|             ┃
┃  |   compilador|  12234|  10316|   2215|    489|   1968|    414|             ┃
┃  |   compressor|    209|      0|    209|      0|    209|      0|             ┃
┃  |       matriz|   8885|   7753|   2011|    452|   1868|    390|             ┃
┃  |    simulador|  14325|  12629|   3155|   1316|   2872|   1087|             ┃
┃  ---------------------------------------------------------------             ┃
┃                                                                              ┃
┃                           Página de tamanho 32 KB                            ┃
┃                           ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                            ┃
┃                                                                              ┃
┃                |---------------|---------------|---------------|             ┃
┃                |      NRU      |      LRU      |      NOVO     |             ┃
┃                |---------------|---------------|---------------|             ┃
┃                |   PF  |   PW  |   PF  |   PW  |   PF  |   PW  |             ┃
┃  --------------|-------|-------|-------|-------|-------|-------|             ┃
┃  |   compilador|  23711|  20108|   3204|    766|   1974|    537|             ┃
┃  |   compressor|    172|      0|    172|      0|    172|      0|             ┃
┃  |       matriz|  24446|  23049|   1950|    636|   1606|    484|             ┃
┃  |    simulador|  24315|  22369|   2997|   1357|   2334|   1111|             ┃
┃  ---------------------------------------------------------------             ┃
┃                                                                              ┃
┃  Contudo, pode-se observar alguns padrões:                                   ┃
┃  * O número de dirty pages (páginas escritas) sempre aumenta com o aumento   ┃
┃  do tamanho da página -                                                      ┃
┃  * No algoritmo NOVO (ótimo), a tendência é o número de page faults diminui  ┃
┃  com o aumento do tamanho da página.                                         ┃
┃  * Assim, no algoritmo NOVO, o número de page faults e dirty pages converge  ┃
┃                                                                              ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃                                                                              ┃
┃                                 Observações                                  ┃
┃                                 ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺                                  ┃
┃                                                                              ┃
┃  Para rodar o script shell, deve-se dar permissão ao mesmo com:              ┃
┃                                                                              ┃
┃     chmod +x getresults.sh                                                   ┃
┃                                                                              ┃
┃  E deve-se ter Python3 instalado em máquina, sendo acessado pelo             ┃
┃  comando python3, senão, alterar chamada ao interpretador Python             ┃
┃  no código do script.                                                        ┃
┃                                                                              ┃
┃                                                                              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛